/*
 * API Pix
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços Pix do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * OpenAPI spec version: 2.1.0
 * Contact: suporte.ti@bcb.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CobCompleta;
import io.swagger.client.model.CobGerada;
import io.swagger.client.model.CobRevisada;
import io.swagger.client.model.CobSolicitada;
import io.swagger.client.model.CobsConsultadas;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CobApi
 */
@Ignore
public class CobApiTest {

    private final CobApi api = new CobApi();

    /**
     * Consultar lista de cobranças.
     *
     * Endpoint para consultar cobranças através de parâmetros como início, fim, cpf, cnpj e status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cobGetTest() throws ApiException {
        OffsetDateTime inicio = null;
        OffsetDateTime fim = null;
        String cpf = null;
        String cnpj = null;
        Boolean locationPresente = null;
        String status = null;
        Integer paginacaoPaginaAtual = null;
        Integer paginacaoItensPorPagina = null;
        CobsConsultadas response = api.cobGet(inicio, fim, cpf, cnpj, locationPresente, status, paginacaoPaginaAtual, paginacaoItensPorPagina);

        // TODO: test validations
    }
    /**
     * Consultar cobrança.
     *
     * Endpoint para consultar uma cobrança através de um determinado txid.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cobTxidGetTest() throws ApiException {
        String txid = null;
        Integer revisao = null;
        CobCompleta response = api.cobTxidGet(txid, revisao);

        // TODO: test validations
    }
    /**
     * Revisar cobrança.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cobTxidPatchTest() throws ApiException {
        CobRevisada body = null;
        String txid = null;
        CobGerada response = api.cobTxidPatch(body, txid);

        // TODO: test validations
    }
    /**
     * Criar cobrança.
     *
     * Endpoint para criar uma cobrança.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cobTxidPutTest() throws ApiException {
        CobSolicitada body = null;
        String txid = null;
        CobGerada response = api.cobTxidPut(body, txid);

        // TODO: test validations
    }
}
