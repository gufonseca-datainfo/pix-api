/*
 * API Pix
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços Pix do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * OpenAPI spec version: 2.1.0
 * Contact: suporte.ti@bcb.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.PayloadLocation;
import io.swagger.client.model.PayloadLocationCompleta;
import io.swagger.client.model.PayloadLocationConsultadas;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayloadLocationApi {
    private ApiClient apiClient;

    public PayloadLocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayloadLocationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for locGet
     * @param inicio  (required)
     * @param fim  (required)
     * @param txIdPresente  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locGetCall(OffsetDateTime inicio, OffsetDateTime fim, Boolean txIdPresente, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inicio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inicio", inicio));
        if (fim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fim", fim));
        if (txIdPresente != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("txIdPresente", txIdPresente));
        if (paginacaoPaginaAtual != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paginacao.paginaAtual", paginacaoPaginaAtual));
        if (paginacaoItensPorPagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paginacao.itensPorPagina", paginacaoItensPorPagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locGetValidateBeforeCall(OffsetDateTime inicio, OffsetDateTime fim, Boolean txIdPresente, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inicio' is set
        if (inicio == null) {
            throw new ApiException("Missing the required parameter 'inicio' when calling locGet(Async)");
        }
        // verify the required parameter 'fim' is set
        if (fim == null) {
            throw new ApiException("Missing the required parameter 'fim' when calling locGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locGetCall(inicio, fim, txIdPresente, paginacaoPaginaAtual, paginacaoItensPorPagina, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Consultar locations cadastradas.
     * Endpoint para consultar locations cadastradas
     * @param inicio  (required)
     * @param fim  (required)
     * @param txIdPresente  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @return PayloadLocationConsultadas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayloadLocationConsultadas locGet(OffsetDateTime inicio, OffsetDateTime fim, Boolean txIdPresente, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina) throws ApiException {
        ApiResponse<PayloadLocationConsultadas> resp = locGetWithHttpInfo(inicio, fim, txIdPresente, paginacaoPaginaAtual, paginacaoItensPorPagina);
        return resp.getData();
    }

    /**
     * Consultar locations cadastradas.
     * Endpoint para consultar locations cadastradas
     * @param inicio  (required)
     * @param fim  (required)
     * @param txIdPresente  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @return ApiResponse&lt;PayloadLocationConsultadas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayloadLocationConsultadas> locGetWithHttpInfo(OffsetDateTime inicio, OffsetDateTime fim, Boolean txIdPresente, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina) throws ApiException {
        com.squareup.okhttp.Call call = locGetValidateBeforeCall(inicio, fim, txIdPresente, paginacaoPaginaAtual, paginacaoItensPorPagina, null, null);
        Type localVarReturnType = new TypeToken<PayloadLocationConsultadas>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consultar locations cadastradas. (asynchronously)
     * Endpoint para consultar locations cadastradas
     * @param inicio  (required)
     * @param fim  (required)
     * @param txIdPresente  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locGetAsync(OffsetDateTime inicio, OffsetDateTime fim, Boolean txIdPresente, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ApiCallback<PayloadLocationConsultadas> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locGetValidateBeforeCall(inicio, fim, txIdPresente, paginacaoPaginaAtual, paginacaoItensPorPagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayloadLocationConsultadas>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locIdGet
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locIdGetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loc/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locIdGetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling locIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locIdGetCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Recuperar location do payload.
     * Recupera a location do payload
     * @param id  (required)
     * @return PayloadLocationCompleta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayloadLocationCompleta locIdGet(String id) throws ApiException {
        ApiResponse<PayloadLocationCompleta> resp = locIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Recuperar location do payload.
     * Recupera a location do payload
     * @param id  (required)
     * @return ApiResponse&lt;PayloadLocationCompleta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayloadLocationCompleta> locIdGetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = locIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PayloadLocationCompleta>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recuperar location do payload. (asynchronously)
     * Recupera a location do payload
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locIdGetAsync(String id, final ApiCallback<PayloadLocationCompleta> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayloadLocationCompleta>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locIdTxidDelete
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locIdTxidDeleteCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loc/{id}/txid"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locIdTxidDeleteValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling locIdTxidDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = locIdTxidDeleteCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Desvincular um txid de uma location.
     * Endpoint para desvinculo de um txid de uma location 
     * @param id  (required)
     * @return PayloadLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayloadLocation locIdTxidDelete(String id) throws ApiException {
        ApiResponse<PayloadLocation> resp = locIdTxidDeleteWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Desvincular um txid de uma location.
     * Endpoint para desvinculo de um txid de uma location 
     * @param id  (required)
     * @return ApiResponse&lt;PayloadLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayloadLocation> locIdTxidDeleteWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = locIdTxidDeleteValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PayloadLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Desvincular um txid de uma location. (asynchronously)
     * Endpoint para desvinculo de um txid de uma location 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locIdTxidDeleteAsync(String id, final ApiCallback<PayloadLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locIdTxidDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayloadLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locPost
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locPostCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/loc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locPostValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = locPostCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Criar location do payload.
     * Criar location do payload
     * @return PayloadLocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PayloadLocation locPost() throws ApiException {
        ApiResponse<PayloadLocation> resp = locPostWithHttpInfo();
        return resp.getData();
    }

    /**
     * Criar location do payload.
     * Criar location do payload
     * @return ApiResponse&lt;PayloadLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PayloadLocation> locPostWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = locPostValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PayloadLocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Criar location do payload. (asynchronously)
     * Criar location do payload
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locPostAsync(final ApiCallback<PayloadLocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locPostValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PayloadLocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
