/*
 * API Pix
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços Pix do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * OpenAPI spec version: 2.1.0
 * Contact: suporte.ti@bcb.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CobCompleta;
import io.swagger.client.model.CobGerada;
import io.swagger.client.model.CobRevisada;
import io.swagger.client.model.CobSolicitada;
import io.swagger.client.model.CobsConsultadas;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CobApi {
    private ApiClient apiClient;

    public CobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CobApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cobGet
     * @param inicio  (required)
     * @param fim  (required)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param locationPresente  (optional)
     * @param status  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cobGetCall(OffsetDateTime inicio, OffsetDateTime fim, String cpf, String cnpj, Boolean locationPresente, String status, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inicio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inicio", inicio));
        if (fim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fim", fim));
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        if (cnpj != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cnpj", cnpj));
        if (locationPresente != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locationPresente", locationPresente));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (paginacaoPaginaAtual != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paginacao.paginaAtual", paginacaoPaginaAtual));
        if (paginacaoItensPorPagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paginacao.itensPorPagina", paginacaoItensPorPagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cobGetValidateBeforeCall(OffsetDateTime inicio, OffsetDateTime fim, String cpf, String cnpj, Boolean locationPresente, String status, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inicio' is set
        if (inicio == null) {
            throw new ApiException("Missing the required parameter 'inicio' when calling cobGet(Async)");
        }
        // verify the required parameter 'fim' is set
        if (fim == null) {
            throw new ApiException("Missing the required parameter 'fim' when calling cobGet(Async)");
        }
        
        com.squareup.okhttp.Call call = cobGetCall(inicio, fim, cpf, cnpj, locationPresente, status, paginacaoPaginaAtual, paginacaoItensPorPagina, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Consultar lista de cobranças.
     * Endpoint para consultar cobranças através de parâmetros como início, fim, cpf, cnpj e status.
     * @param inicio  (required)
     * @param fim  (required)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param locationPresente  (optional)
     * @param status  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @return CobsConsultadas
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CobsConsultadas cobGet(OffsetDateTime inicio, OffsetDateTime fim, String cpf, String cnpj, Boolean locationPresente, String status, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina) throws ApiException {
        ApiResponse<CobsConsultadas> resp = cobGetWithHttpInfo(inicio, fim, cpf, cnpj, locationPresente, status, paginacaoPaginaAtual, paginacaoItensPorPagina);
        return resp.getData();
    }

    /**
     * Consultar lista de cobranças.
     * Endpoint para consultar cobranças através de parâmetros como início, fim, cpf, cnpj e status.
     * @param inicio  (required)
     * @param fim  (required)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param locationPresente  (optional)
     * @param status  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @return ApiResponse&lt;CobsConsultadas&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CobsConsultadas> cobGetWithHttpInfo(OffsetDateTime inicio, OffsetDateTime fim, String cpf, String cnpj, Boolean locationPresente, String status, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina) throws ApiException {
        com.squareup.okhttp.Call call = cobGetValidateBeforeCall(inicio, fim, cpf, cnpj, locationPresente, status, paginacaoPaginaAtual, paginacaoItensPorPagina, null, null);
        Type localVarReturnType = new TypeToken<CobsConsultadas>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consultar lista de cobranças. (asynchronously)
     * Endpoint para consultar cobranças através de parâmetros como início, fim, cpf, cnpj e status.
     * @param inicio  (required)
     * @param fim  (required)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param locationPresente  (optional)
     * @param status  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cobGetAsync(OffsetDateTime inicio, OffsetDateTime fim, String cpf, String cnpj, Boolean locationPresente, String status, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ApiCallback<CobsConsultadas> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cobGetValidateBeforeCall(inicio, fim, cpf, cnpj, locationPresente, status, paginacaoPaginaAtual, paginacaoItensPorPagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CobsConsultadas>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cobTxidGet
     * @param txid  (required)
     * @param revisao  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cobTxidGetCall(String txid, Integer revisao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cob/{txid}"
            .replaceAll("\\{" + "txid" + "\\}", apiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisao != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("revisao", revisao));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cobTxidGetValidateBeforeCall(String txid, Integer revisao, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling cobTxidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = cobTxidGetCall(txid, revisao, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Consultar cobrança.
     * Endpoint para consultar uma cobrança através de um determinado txid.
     * @param txid  (required)
     * @param revisao  (optional)
     * @return CobCompleta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CobCompleta cobTxidGet(String txid, Integer revisao) throws ApiException {
        ApiResponse<CobCompleta> resp = cobTxidGetWithHttpInfo(txid, revisao);
        return resp.getData();
    }

    /**
     * Consultar cobrança.
     * Endpoint para consultar uma cobrança através de um determinado txid.
     * @param txid  (required)
     * @param revisao  (optional)
     * @return ApiResponse&lt;CobCompleta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CobCompleta> cobTxidGetWithHttpInfo(String txid, Integer revisao) throws ApiException {
        com.squareup.okhttp.Call call = cobTxidGetValidateBeforeCall(txid, revisao, null, null);
        Type localVarReturnType = new TypeToken<CobCompleta>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consultar cobrança. (asynchronously)
     * Endpoint para consultar uma cobrança através de um determinado txid.
     * @param txid  (required)
     * @param revisao  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cobTxidGetAsync(String txid, Integer revisao, final ApiCallback<CobCompleta> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cobTxidGetValidateBeforeCall(txid, revisao, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CobCompleta>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cobTxidPatch
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cobTxidPatchCall(CobRevisada body, String txid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cob/{txid}"
            .replaceAll("\\{" + "txid" + "\\}", apiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cobTxidPatchValidateBeforeCall(CobRevisada body, String txid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cobTxidPatch(Async)");
        }
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling cobTxidPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = cobTxidPatchCall(body, txid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Revisar cobrança.
     * 
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @return CobGerada
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CobGerada cobTxidPatch(CobRevisada body, String txid) throws ApiException {
        ApiResponse<CobGerada> resp = cobTxidPatchWithHttpInfo(body, txid);
        return resp.getData();
    }

    /**
     * Revisar cobrança.
     * 
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @return ApiResponse&lt;CobGerada&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CobGerada> cobTxidPatchWithHttpInfo(CobRevisada body, String txid) throws ApiException {
        com.squareup.okhttp.Call call = cobTxidPatchValidateBeforeCall(body, txid, null, null);
        Type localVarReturnType = new TypeToken<CobGerada>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Revisar cobrança. (asynchronously)
     * 
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cobTxidPatchAsync(CobRevisada body, String txid, final ApiCallback<CobGerada> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cobTxidPatchValidateBeforeCall(body, txid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CobGerada>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cobTxidPut
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cobTxidPutCall(CobSolicitada body, String txid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/cob/{txid}"
            .replaceAll("\\{" + "txid" + "\\}", apiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cobTxidPutValidateBeforeCall(CobSolicitada body, String txid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling cobTxidPut(Async)");
        }
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling cobTxidPut(Async)");
        }
        
        com.squareup.okhttp.Call call = cobTxidPutCall(body, txid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Criar cobrança.
     * Endpoint para criar uma cobrança.
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @return CobGerada
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CobGerada cobTxidPut(CobSolicitada body, String txid) throws ApiException {
        ApiResponse<CobGerada> resp = cobTxidPutWithHttpInfo(body, txid);
        return resp.getData();
    }

    /**
     * Criar cobrança.
     * Endpoint para criar uma cobrança.
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @return ApiResponse&lt;CobGerada&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CobGerada> cobTxidPutWithHttpInfo(CobSolicitada body, String txid) throws ApiException {
        com.squareup.okhttp.Call call = cobTxidPutValidateBeforeCall(body, txid, null, null);
        Type localVarReturnType = new TypeToken<CobGerada>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Criar cobrança. (asynchronously)
     * Endpoint para criar uma cobrança.
     * @param body Dados para geração da cobrança. (required)
     * @param txid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cobTxidPutAsync(CobSolicitada body, String txid, final ApiCallback<CobGerada> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cobTxidPutValidateBeforeCall(body, txid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CobGerada>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
