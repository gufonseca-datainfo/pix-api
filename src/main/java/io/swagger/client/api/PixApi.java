/*
 * API Pix
 * A API Pix padroniza serviços oferecidos pelo PSP recebedor no contexto do arranjo Pix, como criação de cobrança, verificação de Pix recebidos, devolução e conciliação. Os serviços expostos pelo PSP recebedor permitem ao usuário recebedor estabelecer integração de sua automação com os serviços Pix do PSP.  # Evolução da API Pix As seguintes mudanças são esperadas e consideradas retro-compatíveis (_backwards-compatibility_):  - Adição de novos recursos na API Pix. - Adição de novos parâmetros opcionais a cobranças. - Adição de novos campos em respostas da API Pix. - Alteração da ordem de campos. - Adição de novos elementos em enumerações  Mudanças compatíveis não geram nova versão da API Pix. Clientes devem estar preparados para lidar com essas mudanças sem quebrar.  Mudanças incompatíveis geram nova versão da API Pix.
 *
 * OpenAPI spec version: 2.1.0
 * Contact: suporte.ti@bcb.gov.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Devolucao;
import io.swagger.client.model.DevolucaoSolicitada;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.Pix;
import io.swagger.client.model.PixConsultados;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PixApi {
    private ApiClient apiClient;

    public PixApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PixApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for pixE2eidDevolucaoIdGet
     * @param e2eid  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pixE2eidDevolucaoIdGetCall(String e2eid, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pix/{e2eid}/devolucao/{id}"
            .replaceAll("\\{" + "e2eid" + "\\}", apiClient.escapeString(e2eid.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pixE2eidDevolucaoIdGetValidateBeforeCall(String e2eid, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'e2eid' is set
        if (e2eid == null) {
            throw new ApiException("Missing the required parameter 'e2eid' when calling pixE2eidDevolucaoIdGet(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pixE2eidDevolucaoIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = pixE2eidDevolucaoIdGetCall(e2eid, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Consultar devolução.
     * Endpoint para consultar uma devolução através de um End To End ID do Pix e do ID da devolução
     * @param e2eid  (required)
     * @param id  (required)
     * @return Devolucao
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Devolucao pixE2eidDevolucaoIdGet(String e2eid, String id) throws ApiException {
        ApiResponse<Devolucao> resp = pixE2eidDevolucaoIdGetWithHttpInfo(e2eid, id);
        return resp.getData();
    }

    /**
     * Consultar devolução.
     * Endpoint para consultar uma devolução através de um End To End ID do Pix e do ID da devolução
     * @param e2eid  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Devolucao&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Devolucao> pixE2eidDevolucaoIdGetWithHttpInfo(String e2eid, String id) throws ApiException {
        com.squareup.okhttp.Call call = pixE2eidDevolucaoIdGetValidateBeforeCall(e2eid, id, null, null);
        Type localVarReturnType = new TypeToken<Devolucao>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consultar devolução. (asynchronously)
     * Endpoint para consultar uma devolução através de um End To End ID do Pix e do ID da devolução
     * @param e2eid  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pixE2eidDevolucaoIdGetAsync(String e2eid, String id, final ApiCallback<Devolucao> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pixE2eidDevolucaoIdGetValidateBeforeCall(e2eid, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Devolucao>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pixE2eidDevolucaoIdPut
     * @param body Dados para pedido de devolução. (required)
     * @param e2eid  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pixE2eidDevolucaoIdPutCall(DevolucaoSolicitada body, String e2eid, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/pix/{e2eid}/devolucao/{id}"
            .replaceAll("\\{" + "e2eid" + "\\}", apiClient.escapeString(e2eid.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pixE2eidDevolucaoIdPutValidateBeforeCall(DevolucaoSolicitada body, String e2eid, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pixE2eidDevolucaoIdPut(Async)");
        }
        // verify the required parameter 'e2eid' is set
        if (e2eid == null) {
            throw new ApiException("Missing the required parameter 'e2eid' when calling pixE2eidDevolucaoIdPut(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pixE2eidDevolucaoIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = pixE2eidDevolucaoIdPutCall(body, e2eid, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Solicitar devolução.
     * Endpoint para solicitar uma devolução através de um e2eid do Pix e do ID da devolução. O motivo que será atribuído à PACS.004 será \&quot;Devolução solicitada pelo usuário recebedor do pagamento original\&quot; cuja sigla é \&quot;MD06\&quot; de acordo com a aba RTReason da PACS.004 que consta no Catálogo de Mensagens do Pix. 
     * @param body Dados para pedido de devolução. (required)
     * @param e2eid  (required)
     * @param id  (required)
     * @return Devolucao
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Devolucao pixE2eidDevolucaoIdPut(DevolucaoSolicitada body, String e2eid, String id) throws ApiException {
        ApiResponse<Devolucao> resp = pixE2eidDevolucaoIdPutWithHttpInfo(body, e2eid, id);
        return resp.getData();
    }

    /**
     * Solicitar devolução.
     * Endpoint para solicitar uma devolução através de um e2eid do Pix e do ID da devolução. O motivo que será atribuído à PACS.004 será \&quot;Devolução solicitada pelo usuário recebedor do pagamento original\&quot; cuja sigla é \&quot;MD06\&quot; de acordo com a aba RTReason da PACS.004 que consta no Catálogo de Mensagens do Pix. 
     * @param body Dados para pedido de devolução. (required)
     * @param e2eid  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Devolucao&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Devolucao> pixE2eidDevolucaoIdPutWithHttpInfo(DevolucaoSolicitada body, String e2eid, String id) throws ApiException {
        com.squareup.okhttp.Call call = pixE2eidDevolucaoIdPutValidateBeforeCall(body, e2eid, id, null, null);
        Type localVarReturnType = new TypeToken<Devolucao>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Solicitar devolução. (asynchronously)
     * Endpoint para solicitar uma devolução através de um e2eid do Pix e do ID da devolução. O motivo que será atribuído à PACS.004 será \&quot;Devolução solicitada pelo usuário recebedor do pagamento original\&quot; cuja sigla é \&quot;MD06\&quot; de acordo com a aba RTReason da PACS.004 que consta no Catálogo de Mensagens do Pix. 
     * @param body Dados para pedido de devolução. (required)
     * @param e2eid  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pixE2eidDevolucaoIdPutAsync(DevolucaoSolicitada body, String e2eid, String id, final ApiCallback<Devolucao> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pixE2eidDevolucaoIdPutValidateBeforeCall(body, e2eid, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Devolucao>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pixE2eidGet
     * @param e2eid  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pixE2eidGetCall(String e2eid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pix/{e2eid}"
            .replaceAll("\\{" + "e2eid" + "\\}", apiClient.escapeString(e2eid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pixE2eidGetValidateBeforeCall(String e2eid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'e2eid' is set
        if (e2eid == null) {
            throw new ApiException("Missing the required parameter 'e2eid' when calling pixE2eidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = pixE2eidGetCall(e2eid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Consultar Pix.
     * Endpoint para consultar um Pix através de um e2eid.
     * @param e2eid  (required)
     * @return Pix
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pix pixE2eidGet(String e2eid) throws ApiException {
        ApiResponse<Pix> resp = pixE2eidGetWithHttpInfo(e2eid);
        return resp.getData();
    }

    /**
     * Consultar Pix.
     * Endpoint para consultar um Pix através de um e2eid.
     * @param e2eid  (required)
     * @return ApiResponse&lt;Pix&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pix> pixE2eidGetWithHttpInfo(String e2eid) throws ApiException {
        com.squareup.okhttp.Call call = pixE2eidGetValidateBeforeCall(e2eid, null, null);
        Type localVarReturnType = new TypeToken<Pix>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consultar Pix. (asynchronously)
     * Endpoint para consultar um Pix através de um e2eid.
     * @param e2eid  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pixE2eidGetAsync(String e2eid, final ApiCallback<Pix> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pixE2eidGetValidateBeforeCall(e2eid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Pix>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pixGet
     * @param inicio  (required)
     * @param fim  (required)
     * @param txid  (optional)
     * @param txIdPresente  (optional)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pixGetCall(OffsetDateTime inicio, OffsetDateTime fim, String txid, Boolean txIdPresente, String cpf, String cnpj, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inicio != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inicio", inicio));
        if (fim != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fim", fim));
        if (txid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("txid", txid));
        if (txIdPresente != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("txIdPresente", txIdPresente));
        if (cpf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cpf", cpf));
        if (cnpj != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cnpj", cnpj));
        if (paginacaoPaginaAtual != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paginacao.paginaAtual", paginacaoPaginaAtual));
        if (paginacaoItensPorPagina != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paginacao.itensPorPagina", paginacaoItensPorPagina));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pixGetValidateBeforeCall(OffsetDateTime inicio, OffsetDateTime fim, String txid, Boolean txIdPresente, String cpf, String cnpj, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'inicio' is set
        if (inicio == null) {
            throw new ApiException("Missing the required parameter 'inicio' when calling pixGet(Async)");
        }
        // verify the required parameter 'fim' is set
        if (fim == null) {
            throw new ApiException("Missing the required parameter 'fim' when calling pixGet(Async)");
        }
        
        com.squareup.okhttp.Call call = pixGetCall(inicio, fim, txid, txIdPresente, cpf, cnpj, paginacaoPaginaAtual, paginacaoItensPorPagina, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Consultar Pix recebidos.
     * Endpoint para consultar Pix recebidos
     * @param inicio  (required)
     * @param fim  (required)
     * @param txid  (optional)
     * @param txIdPresente  (optional)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @return PixConsultados
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PixConsultados pixGet(OffsetDateTime inicio, OffsetDateTime fim, String txid, Boolean txIdPresente, String cpf, String cnpj, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina) throws ApiException {
        ApiResponse<PixConsultados> resp = pixGetWithHttpInfo(inicio, fim, txid, txIdPresente, cpf, cnpj, paginacaoPaginaAtual, paginacaoItensPorPagina);
        return resp.getData();
    }

    /**
     * Consultar Pix recebidos.
     * Endpoint para consultar Pix recebidos
     * @param inicio  (required)
     * @param fim  (required)
     * @param txid  (optional)
     * @param txIdPresente  (optional)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @return ApiResponse&lt;PixConsultados&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PixConsultados> pixGetWithHttpInfo(OffsetDateTime inicio, OffsetDateTime fim, String txid, Boolean txIdPresente, String cpf, String cnpj, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina) throws ApiException {
        com.squareup.okhttp.Call call = pixGetValidateBeforeCall(inicio, fim, txid, txIdPresente, cpf, cnpj, paginacaoPaginaAtual, paginacaoItensPorPagina, null, null);
        Type localVarReturnType = new TypeToken<PixConsultados>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consultar Pix recebidos. (asynchronously)
     * Endpoint para consultar Pix recebidos
     * @param inicio  (required)
     * @param fim  (required)
     * @param txid  (optional)
     * @param txIdPresente  (optional)
     * @param cpf  (optional)
     * @param cnpj  (optional)
     * @param paginacaoPaginaAtual  (optional, default to 0)
     * @param paginacaoItensPorPagina  (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pixGetAsync(OffsetDateTime inicio, OffsetDateTime fim, String txid, Boolean txIdPresente, String cpf, String cnpj, Integer paginacaoPaginaAtual, Integer paginacaoItensPorPagina, final ApiCallback<PixConsultados> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pixGetValidateBeforeCall(inicio, fim, txid, txIdPresente, cpf, cnpj, paginacaoPaginaAtual, paginacaoItensPorPagina, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PixConsultados>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
